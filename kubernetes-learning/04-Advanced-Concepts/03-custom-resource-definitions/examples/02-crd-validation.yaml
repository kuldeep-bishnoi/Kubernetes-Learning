---
# CRD with Advanced Schema Validation Example
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: databases.dbops.example.com
spec:
  group: dbops.example.com
  names:
    kind: Database
    listKind: DatabaseList
    plural: databases
    singular: database
    shortNames:
      - db
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: ["spec"]
          properties:
            spec:
              type: object
              required: ["engine", "version", "storage"]
              properties:
                # Database engine specification with enum validation
                engine:
                  type: string
                  enum:
                    - mysql
                    - postgresql
                    - mongodb
                
                # Version with pattern validation for semantic versioning
                version:
                  type: string
                  pattern: "^[0-9]+\\.[0-9]+\\.[0-9]+$"
                
                # High availability (HA) configuration
                highAvailability:
                  type: boolean
                  default: false
                
                # Storage configuration with nested properties
                storage:
                  type: object
                  required: ["size"]
                  properties:
                    size:
                      type: string
                      pattern: "^[0-9]+(Gi|Mi|Ti)$"
                    storageClass:
                      type: string
                    backupRetention:
                      type: integer
                      minimum: 1
                      maximum: 30
                      default: 7
                
                # Resource requests and limits
                resources:
                  type: object
                  properties:
                    requests:
                      type: object
                      properties:
                        cpu:
                          type: string
                          pattern: "^[0-9]+(m|\\.[0-9]+)?$"
                        memory:
                          type: string
                          pattern: "^[0-9]+(Gi|Mi|Ki)?$"
                    limits:
                      type: object
                      properties:
                        cpu:
                          type: string
                          pattern: "^[0-9]+(m|\\.[0-9]+)?$"
                        memory:
                          type: string
                          pattern: "^[0-9]+(Gi|Mi|Ki)?$"
                
                # Configuration parameters as key-value pairs
                parameters:
                  type: object
                  additionalProperties:
                    type: string
                
                # User credentials management
                users:
                  type: array
                  maxItems: 10
                  items:
                    type: object
                    required: ["name", "role"]
                    properties:
                      name:
                        type: string
                        minLength: 3
                        maxLength: 63
                        pattern: "^[a-zA-Z0-9_-]+$"
                      role:
                        type: string
                        enum:
                          - admin
                          - readwrite
                          - readonly
                
                # Maintenance window specification
                maintenanceWindow:
                  type: object
                  properties:
                    dayOfWeek:
                      type: string
                      enum:
                        - Monday
                        - Tuesday
                        - Wednesday
                        - Thursday
                        - Friday
                        - Saturday
                        - Sunday
                    startTime:
                      type: string
                      pattern: "^([01][0-9]|2[0-3]):[0-5][0-9]$"
                    duration:
                      type: integer
                      minimum: 30
                      maximum: 180
                      default: 60
      additionalPrinterColumns:
        - name: Engine
          type: string
          jsonPath: .spec.engine
        - name: Version
          type: string
          jsonPath: .spec.version
        - name: HA
          type: boolean
          jsonPath: .spec.highAvailability
        - name: Storage
          type: string
          jsonPath: .spec.storage.size
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
---
# Example Custom Resource with validation
apiVersion: dbops.example.com/v1
kind: Database
metadata:
  name: prod-mysql-db
spec:
  engine: mysql
  version: "8.0.26"
  highAvailability: true
  storage:
    size: 50Gi
    storageClass: ssd-premium
    backupRetention: 14
  resources:
    requests:
      cpu: "500m"
      memory: "2Gi"
    limits:
      cpu: "2"
      memory: "8Gi"
  parameters:
    max_connections: "1000"
    character_set_server: "utf8mb4"
    default_authentication_plugin: "mysql_native_password"
  users:
    - name: admin
      role: admin
    - name: app_user
      role: readwrite
    - name: reporting
      role: readonly
  maintenanceWindow:
    dayOfWeek: Sunday
    startTime: "02:00"
    duration: 60

# Test and Usage Instructions:
# 
# Installation:
# 1. Apply the CRD with validation to register the new resource type:
#    ```
#    kubectl apply -f 02-crd-validation.yaml
#    ```
#
# 2. Verify the CRD is registered:
#    ```
#    kubectl get crd databases.dbops.example.com
#    ```
# 
# 3. Create a valid database resource:
#    ```
#    kubectl apply -f - <<EOF
#    apiVersion: dbops.example.com/v1
#    kind: Database
#    metadata:
#      name: prod-mysql-db
#    spec:
#      engine: mysql
#      version: "8.0.26"
#      highAvailability: true
#      storage:
#        size: 50Gi
#        storageClass: ssd-premium
#        backupRetention: 14
#      resources:
#        requests:
#          cpu: "500m"
#          memory: "2Gi"
#        limits:
#          cpu: "2"
#          memory: "8Gi"
#      parameters:
#        max_connections: "1000"
#        character_set_server: "utf8mb4"
#      users:
#        - name: admin
#          role: admin
#        - name: app_user
#          role: readwrite
#    EOF
#    ```
#
# 4. Test validation by creating an invalid database (will be rejected):
#    ```
#    kubectl apply -f - <<EOF
#    apiVersion: dbops.example.com/v1
#    kind: Database
#    metadata:
#      name: invalid-db
#    spec:
#      engine: oracle  # Invalid engine type
#      version: "8"    # Invalid version format
#      storage:
#        size: 50G     # Invalid size format
#    EOF
#    ```
#
# 5. List the databases with custom columns:
#    ```
#    kubectl get databases
#    ```
#
# Notes:
# - Advanced schema validation ensures data quality and prevents invalid configurations
# - Pattern validation uses regular expressions to enforce specific formats
# - Enum validation restricts values to a predefined set
# - Min/max validation enforces numerical boundaries
# - Default values are applied when fields are not specified
# - The additionalPrinterColumns section enhances the output of kubectl get commands
#
# Key Validation Features:
# - Type Validation: Ensures fields have correct data types
# - Pattern Validation: Enforces specific formats (versions, resource units)
# - Enum Validation: Restricts values to a predefined set (engines, roles)
# - Range Validation: Enforces numerical boundaries (minimums, maximums)
# - Required Fields: Ensures mandatory data is provided
# - Nested Validation: Applies rules to sub-objects (storage, resources)
# - Array Validation: Controls array items (users) with item-specific validation
# - String Length: Controls minimum and maximum string lengths 