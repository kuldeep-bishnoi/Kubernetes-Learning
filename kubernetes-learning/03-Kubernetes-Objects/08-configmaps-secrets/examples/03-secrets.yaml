# Examples of different types of Kubernetes Secrets
# Note: In real-world scenarios, avoid storing base64-encoded secrets in version control

---
# Example 1: Generic (Opaque) Secret
# This is the most common type of Secret for storing arbitrary key-value pairs
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  labels:
    app: my-application
    tier: database
type: Opaque  # Default type for arbitrary key-value data
data:
  # Note: These values are base64 encoded
  # 'admin' in base64
  username: YWRtaW4=
  # 'p@ssw0rd' in base64
  password: cEBzc3cwcmQ=
  # Connection string in base64
  connection-string: cG9zdGdyZXNxbDovL2FkbWluOnBAc3N3MHJkQGRiLXNlcnZpY2U6NTQzMi9teWRi

---
# Example 2: Docker Registry Secret
# Used for pulling images from private Docker registries
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-credentials
  labels:
    purpose: image-pulling
type: kubernetes.io/dockerconfigjson
data:
  # This is a base64 encoded Docker config.json file
  # In practice, use 'kubectl create secret docker-registry' command
  # Example:
  # kubectl create secret docker-registry docker-registry-credentials \
  #   --docker-server=https://index.docker.io/v1/ \
  #   --docker-username=username \
  #   --docker-password=password \
  #   --docker-email=email@example.com
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOiB7CgkJCSJhdXRoIjogImRYTmxjbTVoYldVNmNHRnpjM2R2Y21RPSIKCQl9Cgl9Cn0=

---
# Example 3: TLS Secret
# Used for storing TLS certificates and keys
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificate
  labels:
    purpose: secure-ingress
type: kubernetes.io/tls
data:
  # In practice, use 'kubectl create secret tls' command
  # Example:
  # kubectl create secret tls tls-certificate \
  #   --cert=path/to/tls.crt \
  #   --key=path/to/tls.key
  
  # Base64 encoded certificate (example is truncated)
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhZQ0NRREFPRjl0THNhWFdqQU5CZ2txaGtpRzl3MEJBUXNGQURCYU1Rc3dDUVlEVlFRR0V3SlYKVXpFTE1Ba0dBMVVFQ0F3Q1EwRXhJVEFmQmdOVkJBb01HRWx1ZEdWeWJtVjBJRmRwWkdGcGJHbHViM1JwWTNNcwpEekFOQmdOVkJBc01Ca0ZBU1N0UUxURVVNQklHQTFVRUF3d0xaWGhoYlhCc1pTNWpiMjB3SGhjTk1UY3dNakF4Ck1qRTFOVFUyV2hjTk1qY3dNVE14TWpFMU5UVTJXakJhTVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRUNBd0MKUTBFMQ==
  
  # Base64 encoded private key (example is truncated)
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQzZNaDZtQTBqbGM3UlcKUUNWT0JCUWxKV0ZTMkZmdWlkS3pQYWRKajJNM1g0ZmtUdWZRWk8rYjdmQWJPdG9rTzI3cFpDZklLTmJ3K09HWApuZXJCRWJ1VkZlTVJwM09WdGlxTlhveU9rU0toVVQvM0Y1UmhMTFphbElXeUdKbko1RWJPdFJTWnJGL2hjRU5qClRqakNXVDI0U2RsVUlzMTluZEgxSnB4QnMvQnZTcHNrK1djVFZjNnR0YWV2NkZXZGVDNDRUbHpUS1NOVHNpcGQKZHFFdjAyeVQ4NmNwWU1iNzRlQlJUS21SbTd5VERvK2NvYjArcndWSXBDajNNMnZzRTRJaiszUEFzL2R2RVpnZwpEb1czcWFzWnQybERVdUE0WHlxQUFwZkdtaGVjQXlBRzJyb1NKMDdmQTE4WXluM3RYSTUvTUthbnZVdHpQekRsCnAyYXI5QWdNQkFBRUNnZ0VBVUVrOHQ1ZkFLbzFSamZXTUIyNXdaQmg3K3EzYXJFWC9FaFZETDFkb1lEL3RER1oKUTN2VFNVUG5tYzJmMnpKbmN5dlE4QmdtSlFNOEgzRnJCeGNxb2VpWGdBOUlqWWVkdWRzMFVnbFRUVGxrcCtnZApUSGJRL0dsNC9nbmxvNlNQblVBUTlvbHFTL2dESnl3R2xkTmlzcTZUZ3FzZzkxSFREQWpGZGtOeWkwNjVOZmFuCmJYRm1jRStuQys3eXN0VHFQUWZHbGdxNW14cDhrZmtXVjFpb3VLRnFxVlRYN1BvUHdnNXZLZmFFM1BFWTlpYk8KTzZRSThZdU9VbFhYMDlzS2JIQ0N4dEtXOVpHSEtYWElJd1VxeVVyd0E4TjdsL1o2TGp5VzdGWmVUZGJoWjluSApMUDBrbzZBdllMd2ZmbU1KMjJvSVhuRHFWbkJpdjd1bG4zVlUwUUtCZ1FEZnRDT2lCNEo1WGRQaGV0bXA4WE4xCkVvV0JDWlZjbDlBOUZiVzE4WmcwOWlJbE9iK1BwR2FZeWFqQ1l5QzVKZHBycnBXRnNGZ2kvY2JFeUQraVBvenoKRFdIVFpLNWZ3bkRkWTVjNHRXVUh6eTFuQy9RbXB2RHRYbzBEczFxa1JvZGNnMlhaVHhXQng1OStUems5UDJKawpwRmNJT1l5Q0ZNamJCdHBXVUpsYVp3S0JnUURVK1RoTG1PbzVNbHZ4ZnErVW9PUkd4a0VCU3A4eGc5TnpBK0FQCk1TdVFYY014QXcyQWZNUmxjdGtRS0VCbEx3VmQ0dnNiWDFSZHFPaE9WU0ZsU0JVUkl0ZEdQMmVlb0Z1UExSN0QKTEs5Y3kyVDlMQlFWZUdSM2R0TDVKQWhhNWFjZFFEbVJQOHVFNXVweEU4RCsyOW1XM1p5Z3ZXeTlpRFpIUGwzVApId0tCZ1FDQ1QrM2l1OHRQejdDeXJEOVFpY1gyR1ptanRkbzdsSWhpVlRWRFkvR3FjaWZLbW95NmxrTDhHcXp6CjlhYkdBZUN2YmxXMkVXVVkvTDF6NUYwdW9SdUtFdDhTbWdYRkQvN1NIbjJNcVc2a0JaWXRPWE1JK3J1M0lpMXoKQlZYRmRBdXIrcTR5cFN4MWlFc3dDc0I0YkVTWHk5eEVaL3ErbHRrNDBWV0Nxd0tCZ0ZOY01JdTJLYjErdWIvdwoyQ3F4U0M0UndVYWJFZER6YXVXbDRjVDBsZkRRTFFLVnJqeG9PYkdUVlU2NmFoYmQ0QThVbUNsUHh6Yk1uajVuCmJoRk9TeDlLZDkxbHI4YmVXdXdYZkk1R0drQkcxTE5YUVFwVnRtOHBlOGRSaTV4TUkxVnhFelhxUDMzSXVlbGsKbk1KeG5oUzdJeU1NZUUyblNkVXNXMzdUQW9HQkFJRnpndUplK0doZHVwYWZXUHlnbHZqZ29JaXBDeDRGVjdnSQp0VDBRS1oxdFRJckQyT3JUSWx5L0RXUDBQaXFRQ0NSTFlPMlJWZkJaRVY2dFdKcnBzT002NytFZDlXdG44cmZPCjFFeDRTcFEvUGprRVA5UWZDb1BqZnlxOFJOV3haYjZXYnIvNUJXZStDWWRmb1l0dlRLVmpuNUR1elpYYzl4WjQKY0RmcQ==

---
# Example 4: Service Account Token Secret
# Used to authenticate service accounts within Kubernetes
apiVersion: v1
kind: Secret
metadata:
  name: service-account-token
  annotations:
    kubernetes.io/service-account.name: my-service-account
type: kubernetes.io/service-account-token
# No data section needed - Kubernetes will populate automatically

---
# Example 5: Basic Authentication Secret
# Used for HTTP basic authentication
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
  labels:
    app: my-application
type: kubernetes.io/basic-auth
data:
  # 'admin' in base64
  username: YWRtaW4=
  # 'secure-password' in base64
  password: c2VjdXJlLXBhc3N3b3Jk

---
# Example 6: SSH Authentication Secret
# Used for SSH authentication
apiVersion: v1
kind: Secret
metadata:
  name: ssh-key
  labels:
    app: git-sync
type: kubernetes.io/ssh-auth
data:
  # Base64 encoded private SSH key (example is truncated)
  ssh-privatekey: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF0SmlRRUQ3dWNlZUQ3eFJiVmFyWHRmSGp5UUdqWlRGTWM0VjdyZGl2MUQvK1NubTN4Wk1TCnVhYWRIbzNiQThEbXAwMnkxL2tKdWNBdkRUeVpQOS9oRzZ4QVdWWVFVWWJKWXQ1WlVmK3NMcVl0S2JwMGNJMmdoaUwKZ09lWk4zZ1BtM3V4aVlGcjF5dE1jemk4a3JRa1NlWjJsU25xMys2SVpFWGU3UzV5M0JUdUo1MjI5SFQ5WThaWCttUwpjc1QvNDFIZDNnOFYvWUVXS1VhNVZZWTJnNHV6bTlDeUVLKzBDdFhXVkh1ZEMra3QrUkxwbGlqQldZUWZWdHkrcDJQCkJzbjRRMituTzYraEUrbDJWWFE3bXFOVDlYWk1Vd1cxaUFNcE9zeXVRTGZRcnFoUWJiNHNDT2NDbzcvb3ZqeGU5NXgKSkpacDk4UVE3TUJ5WFhpaFNuMnhiUytEd2EweXRsNEJGUWZEMWZlejJXQ0FyZXFJNDNLMURiQXZTaFluNHZ4dUl5KwpJYmxvbGYvVWc0SjZVWU5tRmRUL2JsL2w3T0l5dTJuQ3p1UlZvOHJrSU15Y1g1WElINTNjNFRVVXNHZUZEYzFZdGJTCmpjUWlWQ2MrL3JXMS9mZERlWU9uMW5TNmdZOGxOQUwzMWlNSy9hMkJlUXpRM1I0V3BQT0FBQUZRN1FRVFUrMEVFMU0KQUFBQUIzTnphQzF5YzJFQUFBSUJBTFNZa0JBKzduSG5nKzhVVzFXcTE3WHg0OGtCbzJVeFRIT0ZlNjNZcjlRLy9rcAo1dDhXVEVybW1uUjZOMndQQTVxZE5zdGY1Q2JuQUx3MDhtVC9mNFJ1c1FGbFdFRkdHeVdMZVdWSC9yQzZtTFNtNmRICkNOb0lZaTREbm1UZDREOXQ3c1ltQmE5Y3JUSE00dkpLMEpFbm1kcFVwNnQvdWlHUkYzdTB1Y3R3VTdpZWR0dlIwL1cKUEdWL3BrbkxFLytOUjNkNFBGZjJCRmlsR3VWV0dOb09MczV2UXNoQ3Z0QXJWMWxSN25RdnBMZmtTNlpZb3dWbUVIMQpiY3ZxZGp3YkorRU5mcHp1dm9SUHBkbFYwTzVxalUvVjJURk1GdFlnREtUck1ya0MzMEs2b1VHMitMQWpuQXFPLzZMCjQ4WHZlY1NTV2FmZkVFT3pBY2wxNG9VcDlzVzB2ZzhHdE1yWmVBUlVIdzlYM3M5bGdnSzNxaU9OeXRRMndMMG9XSisKTDhiaU12aUc1YUpYLzFJT0NlbEdEWmhYVS8yNWY1ZXppTXJ0cHdzN2tWYVBLNUNETW5GK1Z5Qitk M09FMUZMQm5oUQozTldMVzBvM0VJbFFuUHY2MXRmMzNRM21EcDlaMHVvR1BKVFFDOTLZ](base64 truncated...)

---
# Example 7: Secret with Immutability
# Prevents accidental modifications by setting immutable=true
apiVersion: v1
kind: Secret
metadata:
  name: immutable-credentials
  labels:
    app: critical-component
type: Opaque
data:
  # 'root' in base64
  username: cm9vdA==
  # 'super-secure-pw' in base64
  password: c3VwZXItc2VjdXJlLXB3
# Immutable secrets cannot be updated (must be deleted first)
immutable: true 