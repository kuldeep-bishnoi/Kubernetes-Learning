# Examples of different ways to use Secrets with Pods
---
# First, let's define a basic Secret to use in the examples
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  # 'admin' in base64
  username: YWRtaW4=
  # 'p@ssw0rd' in base64
  password: cEBzc3cwcmQ=
  # Example config file in base64
  db-config.json: eyJob3N0IjoiZGItc2VydmljZSIsInBvcnQiOjU0MzIsImRhdGFiYXNlIjoiYXBwX2RiIiwibWF4X2Nvbm5lY3Rpb25zIjoxMCwiZW5jcnlwdGlvbiI6InRydWUifQ==

---
# Example 1: Using Secret entries as environment variables individually
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
  labels:
    purpose: demonstrate-secret-env-vars
spec:
  containers:
  - name: app
    image: my-app:1.0
    # Define individual environment variables from Secret
    env:
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: username
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: password
          # Optional: makes the reference optional instead of required
          optional: true
    # You can mix Secret values with other env vars or ConfigMaps
    - name: APP_ENV
      value: "production"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
  restartPolicy: Never

---
# Example 2: Using all Secret entries as environment variables
apiVersion: v1
kind: Pod
metadata:
  name: secret-envfrom-pod
  labels:
    purpose: demonstrate-secret-envfrom
spec:
  containers:
  - name: app
    image: my-app:1.0
    # Load all key-value pairs from Secret as environment variables
    envFrom:
    - secretRef:
        name: db-credentials
        # Optional: makes the reference optional instead of required
        optional: true
    # You can use multiple Secrets
    - secretRef:
        name: api-keys
        optional: true
    # You can add a prefix to all environment variables from this Secret
    - secretRef:
        name: monitoring-credentials
        prefix: MONITORING_
        optional: true
  restartPolicy: Never

---
# Example 3: Using Secret as a mounted volume
apiVersion: v1
kind: Pod
metadata:
  name: secret-volume-pod
  labels:
    purpose: demonstrate-secret-volume
spec:
  containers:
  - name: app
    image: my-app:1.0
    # Mount the Secret as files in a volume
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secrets
      readOnly: true  # Good practice for secrets
  volumes:
  - name: secret-volume
    secret:
      secretName: db-credentials
      # Set file permissions (optional, default is 0644)
      defaultMode: 0400  # Read-only for owner only
      # You can also specify specific items
      # items:
      # - key: username
      #   path: db_username
      # - key: password
      #   path: db_password

---
# Example 4: Mounting a specific secret item as a file
apiVersion: v1
kind: Pod
metadata:
  name: secret-single-file-pod
  labels:
    purpose: demonstrate-secret-specific-file
spec:
  containers:
  - name: app
    image: my-app:1.0
    volumeMounts:
    # Mount only the config file from the secret
    - name: config-volume
      mountPath: /etc/app/config.json
      subPath: db-config.json  # Use subPath to mount a specific file
      readOnly: true
  volumes:
  - name: config-volume
    secret:
      secretName: db-credentials
      defaultMode: 0400  # Read-only

---
# Example 5: Using Docker Registry Secret for private image
apiVersion: v1
kind: Pod
metadata:
  name: private-image-pod
  labels:
    purpose: demonstrate-private-registry
spec:
  containers:
  - name: private-app
    image: private-registry.example.com/my-app:1.0
  # Reference the Docker registry Secret for image pulling
  imagePullSecrets:
  - name: docker-registry-credentials

---
# Example 6: Using Secrets in a Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api-server
        image: api-server:1.0
        ports:
        - containerPort: 8080
        # Mix mounted secrets and environment variables
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        volumeMounts:
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        - name: config-volume
          mountPath: /etc/config/db-config.json
          subPath: db-config.json
          readOnly: true
      volumes:
      - name: tls-certs
        secret:
          secretName: tls-certificate
          defaultMode: 0400
      - name: config-volume
        secret:
          secretName: db-credentials

---
# Example 7: Referencing multiple secret types in a Pod
apiVersion: v1
kind: Pod
metadata:
  name: multi-secret-pod
  labels:
    purpose: demonstrate-multiple-secret-types
spec:
  containers:
  - name: app
    image: my-app:1.0
    env:
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: username
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: password
    volumeMounts:
    # TLS certificates for HTTPS
    - name: tls-certs
      mountPath: /etc/tls
      readOnly: true
    # SSH key for git operations
    - name: ssh-key
      mountPath: /etc/ssh
      readOnly: true
    # Config file from Opaque secret
    - name: app-config
      mountPath: /etc/app/config.json
      subPath: db-config.json
      readOnly: true
  volumes:
  - name: tls-certs
    secret:
      secretName: tls-certificate
      defaultMode: 0400
  - name: ssh-key
    secret:
      secretName: ssh-key
      defaultMode: 0400
  - name: app-config
    secret:
      secretName: db-credentials
      defaultMode: 0400
  imagePullSecrets:
  - name: docker-registry-credentials 