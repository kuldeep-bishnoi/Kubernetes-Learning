# This example demonstrates OPA Gatekeeper policies in Kubernetes
# OPA Gatekeeper is a policy engine that enforces customizable policies on Kubernetes resources

---
# Note: In a real environment, you would first install OPA Gatekeeper using Helm or kubectl:
# kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/release-3.7/deploy/gatekeeper.yaml

---
# 1. ConstraintTemplate defines the policy logic and schema
# This template enforces that all containers have resource requests and limits specified
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredresources
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredResources
      validation:
        # OpenAPIV3Schema defines the schema for the constraint parameters
        openAPIV3Schema:
          properties:
            limits:
              type: array
              items:
                type: string
            requests:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredresources
        
        violation[{"msg": msg, "details": details}] {
          container := input.review.object.spec.containers[_]
          resource := input.parameters.limits[_]
          not container.resources.limits[resource]
          msg := sprintf("Container %v must specify resource limit for %v", [container.name, resource])
          details := {"container": container.name, "missing_resource": resource}
        }
        
        violation[{"msg": msg, "details": details}] {
          container := input.review.object.spec.containers[_]
          resource := input.parameters.requests[_]
          not container.resources.requests[resource]
          msg := sprintf("Container %v must specify resource request for %v", [container.name, resource])
          details := {"container": container.name, "missing_resource": resource}
        }

---
# 2. Constraint applies the template with specific parameters
# This enforces CPU and memory requests and limits on all containers in the default namespace
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredResources
metadata:
  name: require-cpu-memory-resources
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["default"]
  parameters:
    limits: ["cpu", "memory"]
    requests: ["cpu", "memory"]

---
# 3. ConstraintTemplate for allowed registry sources
# This template restricts which container registries can be used
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedrepos
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRepos
      validation:
        openAPIV3Schema:
          properties:
            repos:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedrepos
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          image := container.image
          not startswith_allowed_repo(image)
          msg := sprintf("Container %v has an invalid image repo (%v), allowed repos are %v", [container.name, image, input.parameters.repos])
        }
        
        startswith_allowed_repo(image) {
          repo := input.parameters.repos[_]
          startswith(image, repo)
        }

---
# 4. Constraint for allowed registries
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sAllowedRepos
metadata:
  name: allowed-repositories
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
  parameters:
    repos:
      - "docker.io/bitnami/"
      - "k8s.gcr.io/"
      - "gcr.io/kubernetes-e2e-test-images/"
      - "quay.io/"

---
# 5. ConstraintTemplate for enforcing pod security contexts
# This template requires specific security context settings
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spodsecuritycontext
spec:
  crd:
    spec:
      names:
        kind: K8sPodSecurityContext
      validation:
        openAPIV3Schema:
          properties:
            runAsNonRoot:
              type: boolean
            requiredDropCapabilities:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spodsecuritycontext
        
        violation[{"msg": msg}] {
          input.parameters.runAsNonRoot
          pod := input.review.object
          not pod.spec.securityContext.runAsNonRoot
          msg := "Pod must set runAsNonRoot to true"
        }
        
        violation[{"msg": msg}] {
          input.parameters.runAsNonRoot
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          not input.review.object.spec.securityContext.runAsNonRoot
          msg := sprintf("Container %v must set runAsNonRoot to true", [container.name])
        }
        
        violation[{"msg": msg}] {
          required := input.parameters.requiredDropCapabilities[_]
          container := input.review.object.spec.containers[_]
          not container.securityContext.capabilities.drop
          msg := sprintf("Container %v must drop capabilities %v", [container.name, required])
        }
        
        violation[{"msg": msg}] {
          required := input.parameters.requiredDropCapabilities[_]
          container := input.review.object.spec.containers[_]
          dropped := container.securityContext.capabilities.drop[_]
          not contains(dropped, required)
          msg := sprintf("Container %v must drop capability %v", [container.name, required])
        }
        
        contains(array, element) {
          array[_] == element
        }

---
# 6. Constraint for pod security contexts
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPodSecurityContext
metadata:
  name: pod-security-context
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["default", "prod"]
  parameters:
    runAsNonRoot: true
    requiredDropCapabilities: ["ALL"]

---
# 7. ConstraintTemplate for label requirements
# This template ensures required labels are present
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredlabels
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredLabels
      validation:
        openAPIV3Schema:
          properties:
            labels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  allowedRegex:
                    type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredlabels
        
        violation[{"msg": msg, "details": {"missing_labels": missing}}] {
          provided := {label | input.review.object.metadata.labels[label]}
          required := {label | label := input.parameters.labels[_].key}
          missing := required - provided
          count(missing) > 0
          msg := sprintf("Missing required labels: %v", [missing])
        }
        
        violation[{"msg": msg}] {
          label := input.parameters.labels[_]
          value := input.review.object.metadata.labels[label.key]
          not re_match(label.allowedRegex, value)
          msg := sprintf("Label %v has invalid value %v; must match regex %v", [label.key, value, label.allowedRegex])
        }

---
# 8. Constraint for label requirements
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sRequiredLabels
metadata:
  name: deployment-must-have-labels
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["Deployment"]
  parameters:
    labels:
      - key: app
        allowedRegex: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      - key: environment
        allowedRegex: "^(dev|staging|prod)$"
      - key: owner
        allowedRegex: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"

---
# Example: Deployment that would be rejected by the Gatekeeper policies
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-violating-deployment
  # Missing required labels: app, environment, owner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest  # Not from allowed registry
        # Missing resource requests and limits
        # Missing security context

---
# Example: Deployment that complies with Gatekeeper policies
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-compliant-deployment
  labels:
    app: nginx
    environment: prod
    owner: admin@example.com
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: nginx
        image: quay.io/bitnami/nginx:latest  # Allowed registry
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"

---
# Additional OPA Gatekeeper Components:

# Config for audit (controls how violations for existing resources are reported)
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: "gatekeeper-system"
spec:
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system"]
      processes: ["*"]
  validation:
    tracingEnabled: true

---
# Mutation to add default labels
apiVersion: mutations.gatekeeper.sh/v1alpha1
kind: Assign
metadata:
  name: set-default-namespace-labels
spec:
  applyTo:
  - groups: [""]
    kinds: ["Namespace"]
    versions: ["v1"]
  match:
    scope: "Cluster"
  location: "metadata.labels.environment"
  parameters:
    assign:
      value: "dev"  # Default value
    ifNotPresent: true

---
# Notes on OPA Gatekeeper Best Practices:
#
# 1. Organization:
#    - Group related policies into logical categories
#    - Use descriptive names for constraints
#
# 2. Performance:
#    - Keep Rego policies simple and efficient
#    - Use selective targeting to minimize evaluation overhead
#
# 3. Rollout Strategy:
#    - Start with audit mode before enforcement
#    - Gradually apply to non-critical namespaces first
#
# 4. Error Handling:
#    - Provide clear, actionable error messages in policies
#    - Document policy requirements for developers
#
# 5. Validation:
#    - Test policies with both compliant and non-compliant resources
#    - Create a CI pipeline to validate policy changes
#
# 6. Exemptions:
#    - Use excludedNamespaces for system namespaces
#    - Consider implementing exceptions for specific use cases
#
# Testing and Verification:
#
# 1. Dry run a policy against existing resources:
#    kubectl get deployment -A -o yaml | kubectl apply -f - --dry-run=server
#
# 2. Check for existing violations:
#    kubectl get constraint -o yaml
#
# 3. Review constraint status:
#    kubectl get K8sRequiredResources require-cpu-memory-resources -o yaml
#
# 4. Test with a violation (should be rejected):
#    kubectl apply -f policy-violating-deployment.yaml
#
# 5. Test with a compliant resource (should be accepted):
#    kubectl apply -f policy-compliant-deployment.yaml 